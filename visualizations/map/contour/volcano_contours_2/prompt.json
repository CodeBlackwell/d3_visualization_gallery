{
    "inputs": [
        "Create a contour map visualization for terrain data stored as a grid of {width} x {height} elevation points. Use D3.js to show elevation changes through both color gradients and contour lines.",
        "Visualize topographical data consisting of a {width} x {height} grid of height measurements using D3.js. Generate a map showing elevation patterns through contours and color variations.",
        "Given elevation data with dimensions {width} x {height} and an array of height values, create a topographical visualization using D3.js. Include contour lines, a color gradient representing elevation levels, and an appropriately labeled legend. The visualization should be responsive and include clear labeling."
    ],
    "output": "Here is a contour map visualization for terrain data stored as a grid of {width} x {height} elevation points:\n\n```javascript\nconst CONFIG = {\n    visualizationName: 'Volcano Contours', // Original value: 'Volcano Contours'\n    description: 'Topographic visualization of Maungawhau volcano using contour lines', // Original description for the visualization\n    containerId: 'volcano-map', // ID used to select the container element in HTML\n    containerWidth: '100%', // Original value for the container width: '100%'\n    containerHeight: '100%', // Original value for the container height: '100%'\n    desiredWidth: '928', // Width of the SVG container; Original value was '928'\n    margin: '0 auto', // Center alignment with automatic margin; Original value was '0 auto'\n    displaySettings: 'flex', // Original value for container display: 'flex'\n    justification: 'center', // Justify content to the center; Original value was 'center'\n    alignment: 'center', // Align items to the center; Original value was 'center'\n    svgDisplaySetting: 'block', // Display the SVG as a block element; Original value was 'block'\n    svgMargin: '0 auto', // Center the SVG element; Original value was '0 auto'\n    style: 'max-width: 100%; height: auto;', // Style for the SVG to ensure it scales; Original value was 'max-width: 100%; height: auto;'\n    colorFunction: 'interpolateTurbo', // Color function used to create a gradient; Original value was 'interpolateTurbo'\n    strokeColor: 'black', // Stroke color for contours; Original value was 'black'\n    ticks: 20, // Number of contour ticks; Original value was '20'\n    legendWidth: 200, // Width of the legend; Original value was '200'\n    legendHeight: 20, // Height of the legend; Original value was '20'\n    marginRight: 50, // Margin to the right of the legend; Original value was '50'\n    tickCount: 5, // Number of ticks for the legend axis; Original value was '5'\n    yValue: 30, // Y-position for the title text; Original value was '30'\n    fontSize: '16px', // Font size for the title; Original value was '16px'\n    fontWeight: 'bold', // Font weight for the title; Original value was 'bold'\n    title: 'Maungawhau Volcano Topography', // Title of the visualization; Original value was 'Maungawhau Volcano Topography'\n    dataPath: '/data/volcano-contours_2/volcano.json', // Path to the data file; Original value was '/data/volcano-contours_2/volcano.json'\n    containerPath: '#visualization' // Path to the container where the visualization is appended; Original value was '#visualization'\n};\n\nexport const metadata = {\n    name: CONFIG.visualizationName,\n    description: CONFIG.description,\n    html: \"<div class=\\\"visualization-container\\\"><div id='\" + CONFIG.containerId + \"'></div></div>\",\n    css: \".visualization-container { width: \" + CONFIG.desiredWidth + \"; margin: \" + CONFIG.margin + \"; display: \" + CONFIG.displaySettings + \"; justify-content: \" + CONFIG.justification + \"; align-items: \" + CONFIG.alignment + \"; } #\" + CONFIG.containerId + \" { width: \" + CONFIG.containerWidth + \"; height: \" + CONFIG.containerHeight + \"; } #\" + CONFIG.containerId + \" svg { display: \" + CONFIG.svgDisplaySetting + \"; margin: \" + CONFIG.svgMargin + \"; }\"\n};\n\nexport async function createMapFunction(container) {\n    // Load the data\n    const data = await d3.json(CONFIG.dataPath);\n\n    // Get the specific container for this visualization\n    const visContainer = container.select(`#${CONFIG.containerId}`);\n    visContainer.selectAll('*').remove();\n\n    const n = data.width;\n    const m = data.height;\n    const width = CONFIG.desiredWidth;\n    const height = Math.round(m / n * width);\n\n    // Create the SVG container\n    const svg = visContainer\n        .append('svg')\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', [0, 0, width, height])\n        .attr('style', CONFIG.style);\n\n    // Set up the path generator and contours\n    const path = d3.geoPath()\n        .projection(d3.geoIdentity().scale(width / n));\n\n    const contours = d3.contours()\n        .size([n, m]);\n\n    // Create a color scale\n    const color = d3.scaleSequential(d3[CONFIG.colorFunction])\n        .domain(d3.extent(data.yourDataField))\n        .nice();\n\n    // Draw the contours\n    svg.append('g')\n        .attr('stroke', CONFIG.strokeColor)\n        .selectAll('path')\n        .data(color.ticks(CONFIG.ticks))\n        .join('path')\n        .attr('d', d => path(contours.contour(data.yourDataField, d)))\n        .attr('fill', color);\n\n    // Add a color legend\n    const legendWidth = CONFIG.legendWidth;\n    const legendHeight = CONFIG.legendHeight;\n    const marginRight = CONFIG.marginRight;\n\n    const legend = svg.append('g')\n        .attr('transform', `translate(${width - legendWidth - marginRight}, 20)`);\n\n    // Create gradient for legend\n    const defs = svg.append('defs');\n    const gradient = defs.append('linearGradient')\n        .attr('id', 'legend-gradient')\n        .attr('x1', '0%')\n        .attr('x2', '100%')\n        .attr('y1', '0%')\n        .attr('y2', '0%');\n\n    // Add color stops\n    const colorRange = color.domain();\n    const step = (colorRange[1] - colorRange[0]) / 10;\n    for (let i = 0; i <= 10; i++) {\n        const value = colorRange[0] + step * i;\n        gradient.append('stop')\n            .attr('offset', `${i * 10}%`)\n            .attr('stop-color', color(value));\n    }\n\n    // Draw the legend rectangle\n    legend.append('rect')\n        .attr('width', legendWidth)\n        .attr('height', legendHeight)\n        .style('fill', 'url(#legend-gradient)');\n\n    // Add legend axis\n    const legendScale = d3.scaleLinear()\n        .domain(color.domain())\n        .range([0, legendWidth]);\n\n    const legendAxis = d3.axisBottom(legendScale)\n        .ticks(CONFIG.tickCount)\n        .tickFormat(d => `${d}units`);\n\n    legend.append('g')\n        .attr('transform', `translate(0, ${legendHeight})`)\n        .call(legendAxis);\n\n    // Add title\n    svg.append('text')\n        .attr('x', width / 2)\n        .attr('y', CONFIG.yValue)\n        .attr('text-anchor', 'middle')\n        .style('font-size', CONFIG.fontSize)\n        .style('font-weight', CONFIG.fontWeight)\n        .text(CONFIG.title);\n}\n\n// Initial creation\ncreateMapFunction(d3.select(CONFIG.containerPath));\n```"
}
